1.) Remove Stones to Minimize the Total
Class Solution {
public:
    int minStoneSum(vector<int>& piles, int k) {
    priority_queue<int> maxHeap(piles.begin(), piles.end());
    
    while (k--) {
        int largest = maxHeap.top();
        maxHeap.pop();
        largest -= largest / 2;
        maxHeap.push(largest);
    }
    int totalStones = 0;
    while (!maxHeap.empty()) {
        totalStones += maxHeap.top();
        maxHeap.pop();
    }
    
    return totalStones;
}
};
OUTPUT
Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.
--------------------------------------------------------------------------------------------------------
2.) Minimum Operations to Make the Array Increasing
class Solution {
public:
    int minOperations(vector<int>& nums) {
    int operations = 0;
    for (int i = 1; i < nums.size(); i++) {
        if (nums[i] <= nums[i - 1]) {
            operations += (nums[i - 1] - nums[i] + 1);
            nums[i] = nums[i - 1] + 1;
        }
    }
    return operations;
}
};
OUTPUT
Input: nums = [1,1,1]
Output: 3
Explanation: You can do the following operations:
1) Increment nums[2], so nums becomes [1,1,2].
2) Increment nums[1], so nums becomes [1,2,2].
3) Increment nums[2], so nums becomes [1,2,3].
----------------------------------------------------------------------------------------------------------
3.) Maximum Number of Tasks You Can Assign
class Solution {
public:
bool canAssignTasks(int mid, vector<int>& tasks, vector<int>& workers, int pills, int strength) {
    deque<int> dq;
    int p = pills;
    int n = tasks.size(), m = workers.size();
    
    for (int i = 0; i < mid; ++i) {
        dq.push_back(tasks[i]);
    }
    
    for (int i = m - mid, j = 0; i < m; ++i, ++j) {
        while (!dq.empty() && dq.front() <= workers[i]) {
            dq.pop_front();
        }
        
        if (!dq.empty() && p > 0) {
            dq.pop_back();
            --p;
        }
    }
    
    return dq.empty();
}

int maxTasks(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
    sort(tasks.begin(), tasks.end());
    sort(workers.begin(), workers.end());
    
    int left = 0, right = min(tasks.size(), workers.size()), ans = 0;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (canAssignTasks(mid, tasks, workers, pills, strength)) {
            ans = mid;
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return ans;
}
};
OUTPUT 
Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)
